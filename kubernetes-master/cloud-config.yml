#cloud-config
coreos:
  update:
    reboot-strategy: ${reboot_strategy}
  etcd2:
    name: ${name}
    discovery-srv: ${domain}
    initial-cluster-state: new
    initial-advertise-peer-urls: http://$private_ipv4:2380
    advertise-client-urls: http://$private_ipv4:2379
    listen-client-urls: http://127.0.0.1:2379,http://$private_ipv4:2379
    listen-peer-urls: http://$private_ipv4:2380
  flannel:
    interface: $private_ipv4
    etcd_endpoints: http://127.0.0.1:2379
  units:
    - name: etcd2.service
      command: start
    - name: flanneld.service
      command: start
      drop-ins:
        - name: "40-packet-dependency.conf"
          content: |
            [Unit]
            Requires=etcd2.service
            After=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl --no-sync set /coreos.com/network/config '{"Network":"172.16.0.0/16","Backend":{"Type":"vxlan"}}'
    - name: docker.service
      drop-ins:
        - name: "40-flannel.conf"
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description="Kubernetes API Server"
        Requires=kubernetes-certs.service
        After=kubernetes-certs.service
        [Service]
        Restart=always
        TimeoutStartSec=300
        ExecStartPre=/bin/docker pull quay.io/coreos/hyperkube:v1.2.0_coreos.0
        ExecStart=/bin/docker run --rm --name kube-apiserver --net host \
        -v /etc/kubernetes/ssl:/etc/kubernetes/ssl:ro -v /usr/share/ca-certificates:/etc/ssl/certs:ro \
        quay.io/coreos/hyperkube:v1.2.0_coreos.0 \
        /hyperkube \
        apiserver \
        --bind-address=0.0.0.0 \
        --etcd-servers=http://127.0.0.1:2379 \
        --allow-privileged=true \
        --portal_net=172.16.0.0/24 \
        --secure-port=443 \
        --advertise-address=$private_ipv4 \
        --admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota \
        --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/master-key.pem \
        --client-ca-file=/etc/kubernetes/ssl/ca.pem \
        --kubelet-certificate-authority=/etc/kubernetes/ssl/ca.pem \
        --service-account-key-file=/etc/kubernetes/ssl/master-key.pem \
        --service-cluster-ip-range=172.17.0.0/16
        --apiserver-count=3
        ExecStop=/bin/docker stop -t 2 kube-apiserver
    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description="Kubernetes Proxy"
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        Restart=always
        TimeoutStartSec=300
        ExecStartPre=/bin/docker pull quay.io/coreos/hyperkube:v1.2.0_coreos.0
        ExecStart=/bin/docker run --rm --name kube-proxy --privileged --net host \
        -v /usr/share/ca-certificates:/etc/ssl/certs:ro \
        quay.io/coreos/hyperkube:v1.2.0_coreos.0 \
        /hyperkube \
        proxy \
        --master=127.0.0.1:8080 \
        --proxy-mode=iptables
        ExecStop=/bin/docker stop -t 2 kube-proxy
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description="Kubernetes Controller Manager"
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        Restart=always
        TimeoutStartSec=300
        ExecStartPre=/usr/bin/curl -X POST -d '{"metadata":{"name":"kube-system"}}' -H 'Content-Type: application/json' http://127.0.0.1:8080/api/v1/namespaces
        ExecStartPre=/bin/docker pull quay.io/coreos/hyperkube:v1.2.0_coreos.0
        ExecStart=/bin/docker run --rm --name kube-controller-manager --net host \
        -v /etc/kubernetes/ssl:/etc/kubernetes/ssl:ro -v /etc/ssl/certs:/usr/share/ca-certificates:ro \
        quay.io/coreos/hyperkube:v1.2.0_coreos.0 \
        /hyperkube \
        controller-manager \
        --master=127.0.0.1:8080 \
        --service-account-private-key-file=/etc/kubernetes/ssl/master-key.pem \
        --root-ca-file=/etc/kubernetes/ssl/ca.pem \
        --leader-elect=true
        ExecStop=/bin/docker stop -t 2 kube-controller-manager
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description="Kubernetes Scheduler"
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        Restart=always
        TimeoutStartSec=300
        ExecStartPre=/bin/docker pull quay.io/coreos/hyperkube:v1.2.0_coreos.0
        ExecStart=/bin/docker run --rm --name kube-scheduler --net host \
        quay.io/coreos/hyperkube:v1.2.0_coreos.0 \
        /hyperkube \
        scheduler \
        --master=127.0.0.1:8080 \
        --leader-elect=true
        ExecStop=/bin/docker stop -t 2 kube-scheduler
    - name: kubernetes-certs.service
      command: start
      content: |
        [Unit]
        Description="creates required kubernetes master certs"
        Requires=docker.service
        After=docker.service
        [Service]
        ExecStart=/etc/kubernetes/ssl/create_certs.sh
        RemainAfterExit=yes
        Type=oneshot
    - name: sshd.socket
      command: restart
      content: |
        [Socket]
        ListenStream=2042
        Accept=yes
    - name: settimezone.service
      command: start
      content: |
        [Unit]
        Description=Set the timezone
        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone UTC
        RemainAfterExit=yes
        Type=oneshot
write_files:
  - path: /etc/ntp.conf
    content: |
      # Common pool
      server 0.pool.ntp.org
      server 1.pool.ntp.org

      # - Allow only time queries, at a limited rate.
      # - Allow all local queries (IPv4, IPv6)
      restrict default nomodify nopeer noquery limited kod
      restrict 127.0.0.1
      restrict [::1]
  - path: /etc/ssh/sshd_config
    permissions: 0600
    owner: root:root
    content: |
      # Use most defaults for sshd configuration.
      UsePrivilegeSeparation sandbox
      Subsystem sftp internal-sftp

      PermitRootLogin no
      AllowUsers core
      PasswordAuthentication no
      ChallengeResponseAuthentication no
  - path: /etc/kubernetes/ssl/ca.pem
    permissions: 644
    encoding: base64
    content: ${ca}
  - path: /etc/kubernetes/ssl/ca-key.pem
    permissions: 644
    encoding: base64
    content: ${ca_key}
  - path: /etc/kubernetes/ssl/master-key.pem
    permissions: 644
    encoding: base64
    content: ${master_key}
  - path: /etc/kubernetes/ssl/openssl.cnf
    content: |
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = kubernetes
      DNS.2 = kubernetes.default
      DNS.3 = kubernetes.default.svc
      DNS.4 = kubernetes.default.svc.cluster.local
      DNS.5 = master-internal.${domain}
      DNS.6 = master.${domain}
      IP.1 = $public_ipv4
      IP.2 = $private_ipv4
      IP.3 = 127.0.0.1
      IP.4 = 172.17.0.1
  - path: /etc/kubernetes/ssl/create_certs.sh
    permissions: "755"
    content: |
      #!/bin/bash
      cd /etc/kubernetes/ssl
      sudo openssl req -new -key master-key.pem -out apiserver.csr -subj "/CN=kube-apiserver" -config openssl.cnf
      sudo openssl x509 -req -in apiserver.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out apiserver.pem -days 365 -extensions v3_req -extfile openssl.cnf
      sudo rm apiserver.csr ca-key.pem
      sudo chmod 600 *-key.pem
      sudo chown root:root *-key.pem
