#cloud-config
coreos:
  update:
    reboot-strategy: ${reboot_strategy}
  locksmith:
    window-start: Sun 05:00
    window-length: 1h
  etcd2:
    name: ${name}
    discovery-srv: ${domain}
    initial-cluster-state: new
    initial-advertise-peer-urls: http://$private_ipv4:2380
    advertise-client-urls: http://$private_ipv4:2379
    listen-client-urls: http://127.0.0.1:2379,http://$private_ipv4:2379
    listen-peer-urls: http://$private_ipv4:2380
  flannel:
    interface: $private_ipv4
    etcd_endpoints: http://127.0.0.1:2379
  units:
    - name: etcd2.service
      command: start
    - name: flanneld.service
      command: start
      drop-ins:
        - name: "40-etcd2.conf"
          content: |
            [Unit]
            Requires=etcd2.service
            After=etcd2.service
            [Service]
            Restart=always
            RestartSec=10
            ExecStartPre=/usr/bin/etcdctl --no-sync set /coreos.com/network/config '{"Network":"172.16.0.0/16","Backend":{"Type":"vxlan"}}'
    - name: docker.service
      drop-ins:
        - name: "40-flanneld.conf"
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Description="Launch all of the kubernetes master services"
        Requires=kubernetes-certs.service
        After=kubernetes-certs.service
        [Service]
        Environment=KUBELET_VERSION=v1.2.2_coreos.0
        Restart=always
        RestartSec=10
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=http://127.0.0.1:8080 \
          --register-schedulable=false \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --hostname-override=$private_ipv4 \
          --cluster-dns=172.17.0.10 \
          --cluster-domain=cluster.local
        [Install]
        WantedBy=multi-user.target
    - name: kubernetes-certs.service
      command: start
      content: |
        [Unit]
        Description="creates required kubernetes master certs"
        Requires=docker.service
        After=docker.service
        [Service]
        ExecStart=/etc/kubernetes/ssl/create_certs.sh
        RemainAfterExit=yes
        Type=oneshot
    - name: sshd.socket
      command: restart
      content: |
        [Socket]
        ListenStream=2042
        Accept=yes
    - name: settimezone.service
      command: start
      content: |
        [Unit]
        Description=Set the timezone
        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone UTC
        RemainAfterExit=yes
        Type=oneshot
write_files:
  - path: /etc/kubernetes/manifests/kube-apiserver.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: quay.io/coreos/hyperkube:v1.2.2_coreos.0
          command:
          - /hyperkube
          - apiserver
          - --apiserver-count=${count}
          - --bind-address=0.0.0.0
          - --etcd-servers=http://127.0.0.1:2379
          - --allow-privileged=true
          - --service-cluster-ip-range=172.17.0.0/16
          - --secure-port=443
          - --advertise-address=$private_ipv4
          - --admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
          - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
          - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --client-ca-file=/etc/kubernetes/ssl/ca.pem
          - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          ports:
          - containerPort: 443
            hostPort: 443
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
  - path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    encoding: base64
    content: ${controller_manager}
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    encoding: base64
    content: ${proxy}
  - path: /etc/kubernetes/manifests/kube-scheduler.yaml
    encoding: base64
    content: ${scheduler}
  - path: /etc/kubernetes/manifests/kube-system-namespace.yaml
    encoding: base64
    content: ${namespace}
  - path: /etc/ntp.conf
    encoding: base64
    content: ${ntp}
  - path: /etc/ssh/sshd_config
    permissions: 0600
    owner: root:root
    encoding: base64
    content: ${sshd}
  - path: /etc/kubernetes/ssl/ca.pem
    permissions: 0644
    encoding: base64
    content: ${ca}
  - path: /etc/kubernetes/ssl/ca-key.pem
    permissions: 0644
    encoding: base64
    content: ${ca_key}
  - path: /etc/kubernetes/ssl/apiserver-key.pem
    permissions: 0644
    encoding: base64
    content: ${server_key}
  - path: /etc/kubernetes/ssl/openssl.cnf
    content: |
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = kubernetes
      DNS.2 = kubernetes.default
      DNS.3 = kubernetes.default.svc
      DNS.4 = kubernetes.default.svc.cluster.local
      DNS.5 = master-internal.${domain}
      DNS.6 = master.${domain}
      IP.1 = $public_ipv4
      IP.2 = $private_ipv4
      IP.3 = 127.0.0.1
      IP.4 = 172.17.0.1
  - path: /etc/kubernetes/ssl/create_certs.sh
    permissions: 0755
    encoding: base64
    content: ${create_certs}
